{"code":"// edit from rollup/cli/run/loadConfigFile\r\nimport { __awaiter } from \"tslib\";\r\nimport { extname, isAbsolute } from 'path';\r\nimport { pathToFileURL } from 'url';\r\nimport { version } from 'process';\r\nimport { rollup } from 'rollup';\r\nimport { promises as fs } from 'fs';\r\nfunction supportsNativeESM() {\r\n    return Number(/^v(\\d+)/.exec(version)[1]) >= 13;\r\n}\r\nfunction getDefaultFromCjs(namespace) {\r\n    return namespace.__esModule ? namespace.default : namespace;\r\n}\r\nexport function loadConfigFile(fileName) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const extension = extname(fileName);\r\n        const configFileExport = !(extension === '.cjs' || (extension === '.mjs' && supportsNativeESM()))\r\n            ? yield getDefaultFromTranspiledConfigFile(fileName)\r\n            : extension === '.cjs'\r\n                ? getDefaultFromCjs(require(fileName))\r\n                : (yield import(pathToFileURL(fileName).href)).default;\r\n        return getConfigList(configFileExport);\r\n    });\r\n}\r\nfunction getDefaultFromTranspiledConfigFile(fileName) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const inputOptions = {\r\n            external: (id) => (id[0] !== '.' && !isAbsolute(id)) || id.slice(-5, id.length) === '.json',\r\n            input: fileName,\r\n        };\r\n        const bundle = yield rollup(inputOptions);\r\n        const { output: [{ code }], } = yield bundle.generate({\r\n            exports: 'named',\r\n            format: 'cjs',\r\n            plugins: [\r\n                {\r\n                    name: 'transpile-import-meta',\r\n                    resolveImportMeta(property, { moduleId }) {\r\n                        if (property === 'url') {\r\n                            return `'${pathToFileURL(moduleId).href}'`;\r\n                        }\r\n                        if (property == null) {\r\n                            return `{url:'${pathToFileURL(moduleId).href}'}`;\r\n                        }\r\n                    },\r\n                },\r\n            ],\r\n        });\r\n        return loadConfigFromBundledFile(fileName, code);\r\n    });\r\n}\r\nfunction getConfigList(configFileExport) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const config = yield (typeof configFileExport === 'function' ? configFileExport() : configFileExport);\r\n        if (Object.keys(config).length === 0) {\r\n            throw new Error('Config file must export an options object, or an array of options objects');\r\n        }\r\n        return config;\r\n    });\r\n}\r\nfunction loadConfigFromBundledFile(fileName, bundledCode) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const resolvedFileName = yield fs.realpath(fileName);\r\n        const extension = extname(resolvedFileName);\r\n        const defaultLoader = require.extensions[extension];\r\n        require.extensions[extension] = (module, requiredFileName) => {\r\n            if (requiredFileName === resolvedFileName) {\r\n                ;\r\n                module._compile(bundledCode, requiredFileName);\r\n            }\r\n            else {\r\n                if (defaultLoader) {\r\n                    defaultLoader(module, requiredFileName);\r\n                }\r\n            }\r\n        };\r\n        delete require.cache[resolvedFileName];\r\n        try {\r\n            const config = getDefaultFromCjs(require(fileName));\r\n            require.extensions[extension] = defaultLoader;\r\n            return config;\r\n        }\r\n        catch (err) {\r\n            if (err.code === 'ERR_REQUIRE_ESM') {\r\n                throw new Error('Node tried to require an ES module from a CommonJS file, which is not supported');\r\n            }\r\n            throw err;\r\n        }\r\n    });\r\n}\r\n","references":["/Users/songwenjie/Desktop/rollup-hot-server/node_modules/rollup/dist/rollup.d.ts"]}
