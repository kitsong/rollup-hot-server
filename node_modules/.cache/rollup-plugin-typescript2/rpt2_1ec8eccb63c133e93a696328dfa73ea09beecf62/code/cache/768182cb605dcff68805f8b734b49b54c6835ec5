{"code":"import { __awaiter } from \"tslib\";\r\nimport { resolve, join, relative } from 'path';\r\nimport { promises as fs } from 'fs';\r\nimport mime from 'mime';\r\nexport class ServerConfig {\r\n    constructor(config) {\r\n        this.host = config.host || 'localhost';\r\n        this.port = config.port || 8000;\r\n        this.base = config.base || '';\r\n        this.https = config.https || null;\r\n        this.open = config.open || true;\r\n        this.openPath = config.openPath || '';\r\n        this.watch = config.watch || true;\r\n        this.server = config.server || true;\r\n        this.resolve = config.resolve || {};\r\n    }\r\n}\r\nexport class Server {\r\n    constructor(cf) {\r\n        this.config = cf;\r\n        const { https } = this.config;\r\n        this.close();\r\n        this.server = this.createServer(https);\r\n    }\r\n    listen() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => {\r\n                try {\r\n                    const { port } = this.config;\r\n                    const server = this.server.listen(port, () => {\r\n                        resolve({\r\n                            close() {\r\n                                return __awaiter(this, void 0, void 0, function* () {\r\n                                    yield new Promise(resolve => {\r\n                                        server.close(resolve);\r\n                                    });\r\n                                });\r\n                            },\r\n                        });\r\n                    });\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    close() {\r\n        if (this.server) {\r\n            this.server.close();\r\n        }\r\n        else {\r\n            this.closeServerOnTermination();\r\n        }\r\n    }\r\n    closeServerOnTermination() {\r\n        const terminationSignals = ['SIGINT', 'SIGTERM', 'SIGQUIT', 'SIGHUP'];\r\n        terminationSignals.forEach(signal => {\r\n            process.on(signal, () => {\r\n                if (this.server) {\r\n                    this.server.close();\r\n                    process.exit();\r\n                }\r\n            });\r\n        });\r\n    }\r\n    createServer(https) {\r\n        const requestListener = this.requestListener.bind(this);\r\n        return https ? require('https').createServer(https, requestListener) : require('http').createServer(requestListener);\r\n    }\r\n    requestListener(request, response) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { url } = request;\r\n            const queryRE = /\\?.*$/s;\r\n            const hashRE = /#.*$/s;\r\n            let path = url.replace(hashRE, '').replace(queryRE, '');\r\n            // resolve base\r\n            path = this.resolveBase(path);\r\n            // resolve path\r\n            path = this.resolvePath(path);\r\n            // resolve to html\r\n            let filePath = resolve('.' + path);\r\n            if (path.endsWith('/')) {\r\n                filePath = resolve(filePath, 'index.html');\r\n            }\r\n            try {\r\n                const fileBuffer = yield fs.readFile(filePath);\r\n                const mineType = mime.getType(filePath);\r\n                response.setHeader('Content-Type', mineType);\r\n                response.writeHead(200);\r\n                response.end(fileBuffer, 'utf-8');\r\n            }\r\n            catch (err) {\r\n                response.writeHead(404);\r\n                response.end('404 Not Found' + '\\n\\n' + filePath, 'utf-8');\r\n            }\r\n        });\r\n    }\r\n    resolvePath(path) {\r\n        const { base } = this.config;\r\n        const resolveOption = this.config.resolve;\r\n        for (const key in resolveOption) {\r\n            const target = join(base, key);\r\n            if (path.indexOf(target) === 0) {\r\n                const result = join(base, resolveOption[key]);\r\n                const restPath = relative(target, path);\r\n                return resolve(result, restPath);\r\n            }\r\n        }\r\n        return path;\r\n    }\r\n    resolveBase(path) {\r\n        const { base } = this.config;\r\n        return join(base, path);\r\n    }\r\n}\r\n","references":["/Users/songwenjie/Desktop/rollup-hot-server/node_modules/@types/mime/index.d.ts"]}
